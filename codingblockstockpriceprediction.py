# -*- coding: utf-8 -*-
"""codingblockstockpriceprediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17tUgTB03l-Pwzd_tSdU5piIUZufAq8-q

--> Importing necessary files and libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

x = pd.read_csv("x_train.csv")
y = pd.read_csv("y_train.csv")
xt = pd.read_csv("x_test.csv")
x=np.array(x)
y=np.array(y)
xt=np.array(xt)

x.shape

y

"""--> Visualising the given Dataset of stock prices of the company of about 1200 days"""

plt.rcParams["figure.figsize"] = (18,8)
plt.title('Coding Blocks Stock History')
plt.ylabel('price')
plt.xlabel('Days')
plt.plot(x , color="red")
plt.plot(y)
plt.show()

"""--> Some Data Featuring"""

from sklearn.preprocessing import MinMaxScaler
sc=MinMaxScaler(feature_range=(0,1))
x_scaled=sc.fit_transform(x)

x_scaled

"""--> Getting Data ready to be fed to the RNNs"""

X_train = []
y_train = []
for i in range(60, len(x)):
    X_train.append(x_scaled[i-60:i, 0])
    y_train.append(x_scaled[i, 0])
X_train, y_train = np.array(X_train), np.array(y_train)

X_train.shape

X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

# Importing the Keras libraries and packages
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout

"""--> Creating the RNN model"""

# Initialising the RNN
regressor = Sequential()

# Adding the first LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))
regressor.add(Dropout(0.2))

# Adding a second LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 50, return_sequences = True))
regressor.add(Dropout(0.2))

# Adding a third LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 50, return_sequences = True))
regressor.add(Dropout(0.2))

# Adding a fourth LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 50))
regressor.add(Dropout(0.2))

# Adding the output layer
regressor.add(Dense(units = 1))

# Compiling the RNN
regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')

# Fitting the RNN to the Training set
regressor.fit(X_train, y_train, epochs = 25, batch_size = 32)

"""--> Data featuring for test set"""

xt = np.concatenate((x[1196:1256],xt), axis=0)

xt.shape

xt_scaled=sc.fit_transform(xt)

xt_scaled = np.reshape(xt_scaled, (xt_scaled.shape[0], xt_scaled.shape[1], 1))

xtest=[]
for i in range(60, 80):
    xtest.append(xt_scaled[i-60:i, 0])

xtest = np.array(xtest)

xtest = np.reshape(xtest, (xtest.shape[0], xtest.shape[1], 1))

"""--> Fitting the model to the dataset"""

predicted_stock_price = regressor.predict(xtest)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)

predicted_stock_price

df=pd.DataFrame(predicted_stock_price,)

"""--> Predicted stock prices for the next 20 days."""

df

csv_data = df.to_csv("export.csv")